import utils.UsefulMethods;

import java.util.Arrays;
import java.util.Map;

//return the max product possible from any 2 ints in the array ensuring they are different indices
public class ArrayMaxProduct {
    public static void main(String[] args) {
        int[] myArray = UsefulMethods.generateRandomArrayWithNegatives(15, 20);
        System.out.println(Arrays.toString(myArray));
        arrayMaxProductBruteForce(myArray);
        arrayMaxProductSorted(myArray);
    }

    //O(n^2)
    private static int arrayMaxProductBruteForce(int[] myArray) {
        int maxProduct = Integer.MIN_VALUE;
        int max_i = Integer.MIN_VALUE, max_j = Integer.MIN_VALUE;
        for (int i = 0; i<myArray.length; i++){
            for (int j = 0; j<myArray.length; j++){
                if (i!=j) {
                    if (myArray[i] * myArray[j] > maxProduct) {
                        maxProduct = myArray[i] * myArray[j];
                        max_i = myArray[i];
                        max_j = myArray[j];
                    }
                }
            }
        }
        System.out.println("Max product  = " + maxProduct + " | Generated by values: " + max_i + "*" + max_j);
        return maxProduct;
    }

    private static int arrayMaxProductSorted(int[] myArray) {
        Arrays.sort(myArray);
        int absoluteMax = Integer.MIN_VALUE;
        int max_i = Integer.MIN_VALUE, max_j = Integer.MIN_VALUE;
        int positiveMax = myArray[myArray.length-1] * myArray[myArray.length-2];
        int possibleNegativeMax = Math.abs(myArray[0]) * Math.abs(myArray[1]);

        if (positiveMax > possibleNegativeMax) {
            absoluteMax = positiveMax;
            max_i = myArray[myArray.length-1];
            max_j = myArray[myArray.length-2];
        } else {
            absoluteMax = possibleNegativeMax;
            max_i = myArray[0];
            max_j = myArray[1];
        }

        System.out.println("Max product = " + absoluteMax + " | Generated by values: " + max_i + "*" + max_j);
        return absoluteMax;

    }
}



















